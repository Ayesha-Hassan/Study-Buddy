-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.admin
(
    id serial NOT NULL,
    name character varying(60) COLLATE pg_catalog."default" NOT NULL,
    password character varying(128) COLLATE pg_catalog."default" NOT NULL,
    email character varying(120) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT admin_pkey PRIMARY KEY (id),
    CONSTRAINT uq_admin_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.applications
(
    id serial NOT NULL,
    instructor_id integer NOT NULL,
    course_id integer NOT NULL,
    application_status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    submission_date date DEFAULT CURRENT_DATE,
    CONSTRAINT applications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.courses
(
    id serial NOT NULL,
    title character varying(150) COLLATE pg_catalog."default" NOT NULL,
    domain_id integer NOT NULL,
    credit_hours integer NOT NULL,
    CONSTRAINT courses_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.domains
(
    id serial NOT NULL,
    picture character varying(255) COLLATE pg_catalog."default",
    name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT domains_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.enrollments
(
    instructor_id integer NOT NULL,
    course_id integer NOT NULL,
    student_id integer NOT NULL,
    enrollment_date date NOT NULL,
    CONSTRAINT enrollments_pkey PRIMARY KEY (instructor_id, course_id, student_id),
    CONSTRAINT unique_enrollment UNIQUE (instructor_id, course_id, student_id)
);

CREATE TABLE IF NOT EXISTS public.instructors
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(120) COLLATE pg_catalog."default" NOT NULL,
    phone_no character varying(15) COLLATE pg_catalog."default" NOT NULL,
    domain_id integer NOT NULL,
    date_of_joining date NOT NULL,
    password_hash character varying(128) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT instructors_pkey PRIMARY KEY (id),
    CONSTRAINT uq_instructor_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.instructors_per_course
(
    instructor_id integer NOT NULL,
    course_id integer NOT NULL,
    CONSTRAINT instructors_per_course_pkey PRIMARY KEY (instructor_id, course_id)
);

CREATE TABLE IF NOT EXISTS public.quizzes
(
    id serial NOT NULL,
    instructor_id integer NOT NULL,
    course_id integer NOT NULL,
    student_id integer,
    date_of_conduct date NOT NULL,
    total_marks integer NOT NULL,
    obtained_marks integer,
    CONSTRAINT quizzes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ratings
(
    id serial NOT NULL,
    instructor_id integer NOT NULL,
    course_id integer NOT NULL,
    student_id integer NOT NULL,
    rating double precision NOT NULL,
    CONSTRAINT ratings_pkey PRIMARY KEY (id),
    CONSTRAINT unique_rating_per_student UNIQUE (instructor_id, course_id, student_id)
);

CREATE TABLE IF NOT EXISTS public.students
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    date_of_birth date NOT NULL,
    email character varying(120) COLLATE pg_catalog."default" NOT NULL,
    phone_no character varying(15) COLLATE pg_catalog."default",
    password_hash character varying(128) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT students_pkey PRIMARY KEY (id),
    CONSTRAINT students_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.applications
    ADD CONSTRAINT applications_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.applications
    ADD CONSTRAINT applications_instructor_id_fkey FOREIGN KEY (instructor_id)
    REFERENCES public.instructors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.courses
    ADD CONSTRAINT courses_domain_id_fkey FOREIGN KEY (domain_id)
    REFERENCES public.domains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrollments
    ADD CONSTRAINT enrollments_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrollments
    ADD CONSTRAINT enrollments_instructor_id_fkey FOREIGN KEY (instructor_id)
    REFERENCES public.instructors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.enrollments
    ADD CONSTRAINT enrollments_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.instructors
    ADD CONSTRAINT instructors_domain_id_fkey FOREIGN KEY (domain_id)
    REFERENCES public.domains (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.instructors_per_course
    ADD CONSTRAINT instructors_per_course_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.instructors_per_course
    ADD CONSTRAINT instructors_per_course_instructor_id_fkey FOREIGN KEY (instructor_id)
    REFERENCES public.instructors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quizzes
    ADD CONSTRAINT quizzes_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quizzes
    ADD CONSTRAINT quizzes_instructor_id_fkey FOREIGN KEY (instructor_id)
    REFERENCES public.instructors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quizzes
    ADD CONSTRAINT quizzes_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ratings
    ADD CONSTRAINT ratings_course_id_fkey FOREIGN KEY (course_id)
    REFERENCES public.courses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ratings
    ADD CONSTRAINT ratings_instructor_id_fkey FOREIGN KEY (instructor_id)
    REFERENCES public.instructors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ratings
    ADD CONSTRAINT ratings_student_id_fkey FOREIGN KEY (student_id)
    REFERENCES public.students (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;